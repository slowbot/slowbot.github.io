// ----
// Sass (v3.4.7)
// ----

// config/_breakpoints.scss
$breakpoints: (
  small:    $small-top,
  medium:   $medium-top,
  large:    $large-top,
  x-large:  $xlarge-top
);

$type-weight: (
    thin: 200,
    light: 300,
    regular: 400,
    semi: 600,
    bold: 700
);

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
  font-weight: map-get($type-weight, $weight);
}

// config/_typography.scss
$text-sizing: (
  centi: (
    small: (
      font-size: .75rem,
      line-height: 1em
    )
  ),
  deci: (
    small: (
      font-size: .875rem,
      line-height: 1.25
    )
  ),
  base: (
    small: (
      font-size: 1rem,
      line-height: 1.25
    ),
    medium: (
      font-size: 1rem,
      line-height: 1.375
    )
  ),
  deca: (
    small: (
      font-size: 1.125rem,
      line-height: 1.111
    ),
    medium: (
      font-size: 1.125rem,
      line-height: 1.222
    )
  ),
  hecto: (
    small: (
      font-size: 1.375rem,
      line-height: 1.136
    ),
    medium: (
      font-size: 1.5rem,
      line-height: 1.25
    ),
    large: (
      font-size: 1.75rem,
      line-height: 1.25
    )
  ),
  kilo: (
    small: (
      font-size: 1.625rem,
      line-height: 1.154
    ),
    medium: (
      font-size: 2rem,
      line-height: 1.25
    ),
    large: (
      font-size: 2.25rem,
      line-height: 1.25
    )
  ),
  mega: (
    small: (
      font-size: 2rem,
      line-height: 1.25
    ),
    medium: (
      font-size: 2.5rem,
      line-height: 1.125
    ),
    large: (
      font-size: 3rem,
      line-height: 1.05
    )
  )
);

// lib/functions/_responsive.scss
@function breakpoint($breakpoint-name) {
  @return map-get($breakpoints, $breakpoint-name);
}

// lib/functions/_typography.scss
@function text-breakpoints-for($text-size) {
  @return map-get($text-sizing, $text-size);
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints-map: text-breakpoints-for($text-size);
  @return map-get($text-breakpoints-map, $breakpoint-name);
}

// lib/mixins/_responsive.scss
@mixin respond-above($breakpoint-name) {
  @media screen and (min-width: breakpoint($breakpoint-name)) {
    @content;
  }
}

// lib/mixins/_typography.scss
@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  font-size: map-get($text-size-properties, 'font-size');
  line-height: map-get($text-size-properties, 'line-height');
}

@mixin responsive-text-size($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      @include respond-above($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}

// _typography.scss
#{h1, h2, h3, h4, h5, h6} {
  margin-top: 0;
}  

h1,
.alpha {
  @include responsive-text-size('mega');
}

h2,
.beta {
  @include responsive-text-size('kilo');
}

h3,
.gamma {
  @include responsive-text-size('hecto');
}

h4,
.delta {
  @include responsive-text-size('deca');
}

h5,
h6,
body,
.epsilon {
  @include responsive-text-size('base');
}

.zeta {
  @include responsive-text-size('deci');
}

p {
  margin-top: 0;
}

small,
.omega {
  @include responsive-text-size('centi');
}
